const express = require("express");
const db = require("../database");
const router = express.Router();

router.get("/", (req, res) => {
    db.query(`SELECT * FROM orders;`, (err, result) => {
        if (err) {
            res.status(500).json({ error: err.message });
        } else {
            res.json(result);
        }
    });
});

router.post("/insert", (req, res) => {
    let { customer, phone, adress, status, time } = req.body;
    
    console.log("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body); // üêû Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c

    if (!time) {
        return res.status(400).json({ error: "‚õî L·ªói: Thi·∫øu tr∆∞·ªùng 'time'" });
    }

    try {
        // Chuy·ªÉn ƒë·ªïi `time` sang ƒë·ªãnh d·∫°ng MySQL (YYYY-MM-DD)
        const dateObj = new Date(time);
        if (isNaN(dateObj.getTime())) {
            return res.status(400).json({ error: "·ªói: 'time' kh√¥ng h·ª£p l·ªá" });
        }
        const formattedDate = dateObj.toISOString().split("T")[0]; // YYYY-MM-DD

        const query = `
            INSERT INTO orders (customer, phone, adress, status, time) 
            VALUES (?, ?, ?, ?, ?)`;

        db.query(query, [customer, phone, adress, status, formattedDate], (err, result) => {
            if (err) {
                console.error("L·ªói khi ch√®n v√†o database:", err); // üêû Debug l·ªói SQL
                return res.status(500).json({ error: err.message });
            }

            console.log("‚úÖ K·∫øt qu·∫£ query:", result); // üêû Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa MySQL

            // L·∫•y ID ƒë∆°n h√†ng v·ª´a t·∫°o
            res.status(201).json({ message: "Th√™m ƒë∆°n h√†ng th√†nh c√¥ng!", id_order: result.insertId });
        });
    } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω d·ªØ li·ªáu:", error);
        return res.status(500).json({ error: "L·ªói x·ª≠ l√Ω d·ªØ li·ªáu" });
    }
});


router.post("/find", (req, res) => {
    const { id_order, customer, phone, time } = req.body;

    let query = "SELECT * FROM orders WHERE 1=1";
    let queryParams = [];

    if (id_order) {
        query += " AND id_order = ?";
        queryParams.push(id_order);
    }
    if (customer) {
        query += " AND customer LIKE ?";
        queryParams.push(`%${customer}%`);
    }
    if (phone) {
        query += " AND phone LIKE ?";
        queryParams.push(`%${phone}%`);
    }
    if (time) {
        query += " AND time = ?";
        queryParams.push(time);
    }

    db.query(query, queryParams, (err, results) => {
        if (err) {
            console.error("L·ªói truy v·∫•n database:", err);
            return res.status(500).json({ error: "L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu" });
        }

        if (results.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        }

        res.status(200).json(results);
    });
});
module.exports = router;